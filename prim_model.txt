prim_model usrp_source
{
	// sampling rate
	param read_on_reset double SAMPLE_RATE = 2e6;
	// buffer to read in USRP data
	param read_on_reset unsigned int BUF_LENGTH = 4096*2;
	// gain 0 or 1
	param read_on_reset double GAIN = 5.0;
	// frequency
	param read_on_reset double FREQUENCY = 105e6;
	// Wire format
	param read_on_reset char* WIREFMT = "sc16";
	// Host format- 0 for fc32 and 1 for sc16
	param read_on_reset char* HOSTFMT = "fc32";

	type_param T = complex<float>;

	port out T outr;
	usrp_src u;

	unsigned int i;
	float b_r, b_im, read_value;
	complex<float> mybuffer[BUF_LENGTH];

	main_action
	{
		read_value=u.streamSamples(BUF_LENGTH, mybuffer);
		for(i=0; i<read_value; i+=2)
		{
			b_r=(float)((mybuffer[i  ]));
			b_im=(float)((mybuffer[i+1]));
			outr = complex(b_r,b_im);
			write(outr);
		}
	}

	reset_action
	{
		u.init(SAMPLE_RATE,FREQUENCY,GAIN,HOSTFMT,WIREFMT);
		u.start();
	}

	catch_termination
	{
	u.stop ();
	 printf("\n device closed \n \n");
	}

	attributes
	{
		// ports attributes
		outr.rotate("false");
	}

}
